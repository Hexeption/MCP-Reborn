buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5+'
        classpath "gradle.plugin.org.jetbrains.gradle.plugin.idea-ext:gradle-idea-ext:1.1.3"
    }
}

import net.minecraftforge.forge.tasks.*
import org.jetbrains.gradle.ext.*

apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle.patcher'
apply plugin: "org.jetbrains.gradle.plugin.idea-ext"

println(' Java: ' + System.getProperty('java.version') +
        ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')' +
        ' Arch: ' + System.getProperty('os.arch'))

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

configurations {
    shade
    compile.extendsFrom shade
}

group = 'me.yourname'
version = '1.0.0'

ext {
    minecraft_version = '1.20'
    mcp_version = '20230608.053357'
    mappings_channel = 'official'
    mappings_version = '1.20'
    spi_version = '6.0.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.minecraftforge:forgespi:' + spi_version
//    Use the shade to add the lib to the jar
//    or use compile if you want to load the lib from the version.json
//    from a maven repo
//    shade 'package-here'
//    compile 'package-here'
}

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.mcp'
    mcp {
        config = minecraft_version + '-' + mcp_version
        pipeline = 'joined'
    }
}

evaluationDependsOn(':mcp')

patcher {
    parent = project(':mcp')
    patchedSrc = file('src/main/java')
    mappings channel: mappings_channel, version: mappings_version
    mcVersion = minecraft_version
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

task runclient(type: JavaExec) {
    group = "MCP"
    description = "Runs the client"
    classpath sourceSets.main.runtimeClasspath
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        jvmArgs '-XstartOnFirstThread'
    }
    args '--gameDir', '.'
    args '--version', minecraft_version
    args '--assetsDir', downloadAssets.output
    args '--assetIndex', "1.20"
    args '--accessToken', '0'
    main 'net.minecraft.client.main.Main'
    workingDir 'run'
}



task setup() {
    group = "MCP"
    description = "Setups the dev workspace"
    dependsOn ':extractMapped'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}

task copyAssets {
    group = "MCP"
    description = "Download and place the assets into the run folder"
    dependsOn ':downloadAssets'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}

task runserver(type: JavaExec) {
    mkdir 'runserver'
    group = "MCP"
    description = "Runs the server"
    standardInput = System.in
    classpath sourceSets.main.runtimeClasspath
    main 'net.minecraft.server.Main'
    workingDir 'runserver'
}

idea.project.settings {
    runConfigurations {
        "Minecraft"(Application) {
            mainClass = 'mcp.client.Start'
            workingDirectory = "$projectDir/run"
            moduleName = idea.module.name + '.main'
        }
    }
}
